from os import wait3

from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from soupsieve import match

from schemas import ServiceStatus, User
from parser.abstract_parser import AbstractDownDetectorParser
from repo.abstract_repo import AbstractRepo

router = Router()

@router.message(CommandStart())
async def start_cmd(msg: types.Message, repo: AbstractRepo) -> None:
    await repo.save_user(User(tg_id=str(msg.from_user.id)))
    await msg.answer(f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}!\n/stats - –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã\n/set_delay [–º–∏–Ω—É—Ç—ã] - —É–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")

@router.message(Command("set_delay"))
async def set_delay_cmd(msg: types.Message, repo: AbstractRepo) -> None:
    cmd = msg.text.split(" ")
    if len(cmd) !=  2:
        await msg.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
        return
    try:
        delay = int(cmd[1])
    except:
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    if delay < 10:
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 10!")
        return
    if delay > 100000:
        await msg.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ!")
        return

    users = await repo.get_all_users()

    for u in users:
        if u.tg_id == str(msg.from_user.id):
            u.update_delay_min = delay

            await repo.save_user(u)
            await msg.answer("–£—Å–ø–µ—à–Ω–∞—è –∏–∑–º–µ–Ω–∞ üòà")
            return
    await msg.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /start")

@router.message(Command("users"))
async def users_cmd(msg: types.Message, repo: AbstractRepo) -> None:
    all_users = await repo.get_all_users()

    answer_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: \n"
    for u in all_users:
        answer_text +=f"ID: {u.tg_id}\nUPDATE_DELAY: {u.update_delay_min}\nLAST_UPDATE: {u.last_update_time}\n"

    if not answer_text:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    await msg.answer(answer_text)

@router.message(Command("stats"))
async def stats_cmd(msg: types.Message, parser: AbstractDownDetectorParser) -> None:
    services = parser.get_problems_services()

    answer_text = ""

    status_smail = ""
    for s in services:
        match s.service_status:
            case ServiceStatus.OK:
                status_smail = "üü¢"
            case ServiceStatus.WARNING:
                status_smail = "üü°"
            case ServiceStatus.ERROR:
                status_smail = "üî¥"

        answer_text += f"{status_smail} {s.service_name}\n"

    await msg.answer(answer_text)